# /////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////// SETTINGS //////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

# Set standards
cmake_minimum_required(VERSION 3.10)
project(roll-goal C CXX)
set(CMAKE_CXX_STANDARD 17)
set(default_build_type "Release")

# Setup Conan
if (EMSCRIPTEN)
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    conan_basic_setup()
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -s USE_SDL=2 -s USE_WEBGL2=1 -std=c++17")
else()
    if(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
    message(STATUS "Downloading conan.cmake")
    file(DOWNLOAD
        "https://raw.githubusercontent.com/conan-io/cmake-conan/v0.14/conan.cmake"
        "${CMAKE_BINARY_DIR}/conan.cmake")
    endif()
    include(${CMAKE_BINARY_DIR}/conan.cmake)
    conan_cmake_run(CONANFILE conanfile.txt BASIC_SETUP BUILD missing)
endif()

# /////////////////////////////////////////////////////////////////////////////
# ////////////////////////////// PROJECT FILES ////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

file(GLOB_RECURSE MY_SOURCES src/*)

# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////// DEPENDENCIES ////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

find_package(OpenGL REQUIRED)

# ------------------------- BUILD DEPENDENCIES IF NEEDED ----------------------

add_library(GLAD STATIC "lib/glad/src/glad.c")

# /////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////// INCLUDES //////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

include_directories(
    ${OPENGL_INCLUDE_DIR}
    lib/glad/include
    lib
    src
)

# /////////////////////////////////////////////////////////////////////////////
# /////////////////////////////////// BUILD ///////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

set(EXECUTABLE_OUTPUT_PATH bin/${CMAKE_BUILD_TYPE})
add_executable(${PROJECT_NAME} ${MY_SOURCES})
target_link_libraries(
    ${PROJECT_NAME}
    ${CONAN_LIBS}
    ${OPENGL_LIBRARIES}
    GLAD
)

if (UNIX) # Use dynamic linking library
    target_link_libraries(${PROJECT_NAME} -ldl)
endif()

# /////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////// TESTING ///////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

if (NOT EMSCRIPTEN)
    list(REMOVE_ITEM MY_SOURCES "main.cpp")
    file(GLOB_RECURSE MY_TESTS test/*)
    add_executable(TEST_ROLL_GOAL ${MY_SOURCES} ${MY_TESTS})
    target_link_libraries(
        TEST_ROLL_GOAL
        ${CONAN_LIBS}
        ${OPENGL_LIBRARIES}
        GLAD
    )

    # Make the test discoverable by CTest
    enable_testing()
    include(GoogleTest)
    gtest_discover_tests(TEST_ROLL_GOAL ${MY_TESTS})
endif()
